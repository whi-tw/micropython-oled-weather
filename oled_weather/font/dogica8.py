# Code generated by font_to_py.py.
# Font: dogicapixel.ttf Char set:  !"%'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzÂ°
# Cmd: font_to_py.py -x -k essential TTF/dogicapixel.ttf 8 dogica8.py
version = '0.33'

def height():
    return 8

def baseline():
    return 7

def max_width():
    return 9

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 176

_font =\
b'\x07\x00\x38\x44\x04\x18\x20\x00\x10\x00\x04\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x03\x00\x40\x40\x40\x40\x40\x00\x40\x00\x06\x00'\
b'\x00\x28\x28\x50\x00\x00\x00\x00\x09\x00\x22\x00\x54\x00\x54\x00'\
b'\x28\x00\x0a\x00\x15\x00\x15\x00\x22\x00\x04\x00\x00\x20\x20\x40'\
b'\x00\x00\x00\x00\x04\x00\x20\x40\x40\x40\x40\x40\x20\x00\x04\x00'\
b'\x40\x20\x20\x20\x20\x20\x40\x00\x07\x00\x00\x10\x54\x28\x54\x10'\
b'\x00\x00\x07\x00\x00\x10\x10\x7c\x10\x10\x00\x00\x04\x00\x00\x00'\
b'\x00\x00\x00\x20\x20\x40\x06\x00\x00\x00\x00\x00\x78\x00\x00\x00'\
b'\x03\x00\x00\x00\x00\x00\x00\x00\x40\x00\x06\x00\x08\x08\x10\x10'\
b'\x20\x20\x40\x40\x07\x00\x38\x44\x54\x54\x54\x44\x38\x00\x07\x00'\
b'\x10\x70\x10\x10\x10\x10\x7c\x00\x07\x00\x38\x44\x04\x08\x10\x20'\
b'\x7c\x00\x07\x00\x78\x04\x04\x38\x04\x04\x78\x00\x07\x00\x08\x18'\
b'\x28\x48\x7c\x08\x08\x00\x07\x00\x7c\x40\x78\x04\x04\x44\x38\x00'\
b'\x07\x00\x38\x44\x40\x78\x44\x44\x38\x00\x07\x00\x7c\x44\x04\x08'\
b'\x10\x20\x20\x00\x07\x00\x38\x44\x44\x38\x44\x44\x38\x00\x07\x00'\
b'\x38\x44\x44\x3c\x04\x08\x30\x00\x03\x00\x00\x00\x40\x00\x00\x40'\
b'\x00\x00\x04\x00\x00\x00\x00\x20\x00\x20\x20\x40\x05\x00\x00\x10'\
b'\x20\x40\x20\x10\x00\x00\x08\x00\x00\x00\x7e\x00\x7e\x00\x00\x00'\
b'\x05\x00\x00\x40\x20\x10\x20\x40\x00\x00\x07\x00\x38\x44\x04\x18'\
b'\x20\x00\x10\x00\x09\x00\x3c\x00\x42\x00\x5a\x00\x4a\x00\x5c\x00'\
b'\x41\x00\x3e\x00\x00\x00\x07\x00\x38\x44\x44\x44\x7c\x44\x44\x00'\
b'\x07\x00\x78\x44\x44\x78\x44\x44\x78\x00\x07\x00\x38\x44\x40\x40'\
b'\x40\x44\x38\x00\x08\x00\x7c\x22\x22\x22\x22\x22\x3c\x00\x07\x00'\
b'\x7c\x40\x40\x78\x40\x40\x7c\x00\x07\x00\x7c\x40\x40\x78\x40\x40'\
b'\x40\x00\x07\x00\x3c\x40\x40\x4c\x44\x44\x3c\x00\x07\x00\x44\x44'\
b'\x44\x7c\x44\x44\x44\x00\x05\x00\x70\x20\x20\x20\x20\x20\x70\x00'\
b'\x06\x00\x78\x10\x10\x10\x10\x10\x60\x00\x07\x00\x44\x48\x50\x70'\
b'\x48\x48\x44\x00\x06\x00\x40\x40\x40\x40\x40\x40\x78\x00\x08\x00'\
b'\x42\x42\x66\x5a\x42\x42\x42\x00\x07\x00\x44\x64\x54\x4c\x44\x44'\
b'\x44\x00\x07\x00\x38\x44\x44\x44\x44\x44\x38\x00\x07\x00\x78\x44'\
b'\x44\x78\x40\x40\x40\x00\x07\x00\x38\x44\x44\x44\x54\x48\x34\x00'\
b'\x07\x00\x78\x44\x44\x78\x48\x44\x44\x00\x07\x00\x38\x44\x40\x38'\
b'\x04\x44\x38\x00\x07\x00\x7c\x10\x10\x10\x10\x10\x10\x00\x07\x00'\
b'\x44\x44\x44\x44\x44\x44\x38\x00\x07\x00\x44\x44\x44\x44\x28\x28'\
b'\x10\x00\x09\x00\x41\x00\x41\x00\x49\x00\x49\x00\x49\x00\x55\x00'\
b'\x22\x00\x00\x00\x07\x00\x44\x44\x28\x10\x28\x44\x44\x00\x07\x00'\
b'\x44\x44\x44\x28\x10\x10\x10\x00\x07\x00\x7c\x04\x08\x10\x20\x40'\
b'\x7c\x00\x07\x00\x00\x38\x04\x3c\x44\x44\x3c\x00\x07\x00\x40\x40'\
b'\x78\x44\x44\x44\x78\x00\x07\x00\x00\x38\x44\x40\x40\x40\x3c\x00'\
b'\x07\x00\x04\x04\x3c\x44\x44\x44\x3c\x00\x07\x00\x00\x38\x44\x7c'\
b'\x40\x40\x3c\x00\x07\x00\x1c\x20\x20\x78\x20\x20\x20\x00\x07\x00'\
b'\x00\x3c\x44\x44\x44\x3c\x04\x38\x07\x00\x40\x40\x58\x64\x44\x44'\
b'\x44\x00\x05\x00\x20\x00\x60\x20\x20\x20\x70\x00\x05\x00\x00\x70'\
b'\x20\x20\x20\x20\x20\x40\x07\x00\x00\x44\x48\x50\x70\x48\x44\x00'\
b'\x05\x00\x00\x40\x40\x40\x40\x40\x30\x00\x09\x00\x00\x00\x36\x00'\
b'\x49\x00\x49\x00\x49\x00\x49\x00\x49\x00\x00\x00\x07\x00\x00\x18'\
b'\x64\x44\x44\x44\x44\x00\x07\x00\x00\x38\x44\x44\x44\x44\x38\x00'\
b'\x07\x00\x00\x78\x44\x44\x44\x78\x40\x40\x07\x00\x00\x3c\x44\x44'\
b'\x44\x3c\x04\x04\x06\x00\x00\x58\x60\x40\x40\x40\x40\x00\x07\x00'\
b'\x00\x38\x40\x38\x04\x44\x38\x00\x06\x00\x40\x40\x78\x40\x40\x40'\
b'\x38\x00\x07\x00\x00\x44\x44\x44\x44\x4c\x34\x00\x07\x00\x00\x44'\
b'\x44\x44\x28\x28\x10\x00\x08\x00\x00\x02\x52\x52\x52\x52\x2c\x00'\
b'\x07\x00\x00\x44\x28\x10\x10\x28\x44\x00\x06\x00\x00\x48\x48\x48'\
b'\x30\x10\x60\x00\x06\x00\x00\x78\x08\x10\x20\x40\x78\x00\x05\x00'\
b'\x00\x20\x50\x50\x20\x00\x00\x00'

_sparse =\
b'\x20\x00\x0a\x00\x21\x00\x14\x00\x22\x00\x1e\x00\x25\x00\x28\x00'\
b'\x27\x00\x3a\x00\x28\x00\x44\x00\x29\x00\x4e\x00\x2a\x00\x58\x00'\
b'\x2b\x00\x62\x00\x2c\x00\x6c\x00\x2d\x00\x76\x00\x2e\x00\x80\x00'\
b'\x2f\x00\x8a\x00\x30\x00\x94\x00\x31\x00\x9e\x00\x32\x00\xa8\x00'\
b'\x33\x00\xb2\x00\x34\x00\xbc\x00\x35\x00\xc6\x00\x36\x00\xd0\x00'\
b'\x37\x00\xda\x00\x38\x00\xe4\x00\x39\x00\xee\x00\x3a\x00\xf8\x00'\
b'\x3b\x00\x02\x01\x3c\x00\x0c\x01\x3d\x00\x16\x01\x3e\x00\x20\x01'\
b'\x3f\x00\x2a\x01\x40\x00\x34\x01\x41\x00\x46\x01\x42\x00\x50\x01'\
b'\x43\x00\x5a\x01\x44\x00\x64\x01\x45\x00\x6e\x01\x46\x00\x78\x01'\
b'\x47\x00\x82\x01\x48\x00\x8c\x01\x49\x00\x96\x01\x4a\x00\xa0\x01'\
b'\x4b\x00\xaa\x01\x4c\x00\xb4\x01\x4d\x00\xbe\x01\x4e\x00\xc8\x01'\
b'\x4f\x00\xd2\x01\x50\x00\xdc\x01\x51\x00\xe6\x01\x52\x00\xf0\x01'\
b'\x53\x00\xfa\x01\x54\x00\x04\x02\x55\x00\x0e\x02\x56\x00\x18\x02'\
b'\x57\x00\x22\x02\x58\x00\x34\x02\x59\x00\x3e\x02\x5a\x00\x48\x02'\
b'\x61\x00\x52\x02\x62\x00\x5c\x02\x63\x00\x66\x02\x64\x00\x70\x02'\
b'\x65\x00\x7a\x02\x66\x00\x84\x02\x67\x00\x8e\x02\x68\x00\x98\x02'\
b'\x69\x00\xa2\x02\x6a\x00\xac\x02\x6b\x00\xb6\x02\x6c\x00\xc0\x02'\
b'\x6d\x00\xca\x02\x6e\x00\xdc\x02\x6f\x00\xe6\x02\x70\x00\xf0\x02'\
b'\x71\x00\xfa\x02\x72\x00\x04\x03\x73\x00\x0e\x03\x74\x00\x18\x03'\
b'\x75\x00\x22\x03\x76\x00\x2c\x03\x77\x00\x36\x03\x78\x00\x40\x03'\
b'\x79\x00\x4a\x03\x7a\x00\x54\x03\xb0\x00\x5e\x03'

_mvfont = memoryview(_font)
_mvsp = memoryview(_sparse)
ifb = lambda l : l[0] | (l[1] << 8)

def bs(lst, val):
    while True:
        m = (len(lst) & ~ 7) >> 1
        v = ifb(lst[m:])
        if v == val:
            return ifb(lst[m + 2:])
        if not m:
            return 0
        lst = lst[m:] if v < val else lst[:m]

def get_ch(ch):
    doff = bs(_mvsp, ord(ch))
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 8
    return _mvfont[doff + 2:next_offs], 8, width
 
