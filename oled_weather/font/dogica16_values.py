# Code generated by font_to_py.py.
# Font: dogicapixel.ttf Char set:  %0123456789CÂ°
# Cmd: font_to_py.py -x -k values TTF/dogicapixel.ttf 16 dogica16_values.py
version = '0.33'

def height():
    return 16

def baseline():
    return 14

def max_width():
    return 18

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 176

_font =\
b'\x0e\x00\x0f\xc0\x0f\xc0\x30\x30\x30\x30\x00\x30\x00\x30\x03\xc0'\
b'\x03\xc0\x0c\x00\x0c\x00\x00\x00\x00\x00\x03\x00\x03\x00\x00\x00'\
b'\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x12\x00\x0c\x0c\x00\x0c\x0c\x00\x33\x30\x00\x33'\
b'\x30\x00\x33\x30\x00\x33\x30\x00\x0c\xc0\x00\x0c\xc0\x00\x00\xcc'\
b'\x00\x00\xcc\x00\x03\x33\x00\x03\x33\x00\x03\x33\x00\x03\x33\x00'\
b'\x0c\x0c\x00\x0c\x0c\x00\x0e\x00\x0f\xc0\x0f\xc0\x30\x30\x30\x30'\
b'\x33\x30\x33\x30\x33\x30\x33\x30\x33\x30\x33\x30\x30\x30\x30\x30'\
b'\x0f\xc0\x0f\xc0\x00\x00\x00\x00\x0e\x00\x03\x00\x03\x00\x3f\x00'\
b'\x3f\x00\x03\x00\x03\x00\x03\x00\x03\x00\x03\x00\x03\x00\x03\x00'\
b'\x03\x00\x3f\xf0\x3f\xf0\x00\x00\x00\x00\x0e\x00\x0f\xc0\x0f\xc0'\
b'\x30\x30\x30\x30\x00\x30\x00\x30\x00\xc0\x00\xc0\x03\x00\x03\x00'\
b'\x0c\x00\x0c\x00\x3f\xf0\x3f\xf0\x00\x00\x00\x00\x0e\x00\x3f\xc0'\
b'\x3f\xc0\x00\x30\x00\x30\x00\x30\x00\x30\x0f\xc0\x0f\xc0\x00\x30'\
b'\x00\x30\x00\x30\x00\x30\x3f\xc0\x3f\xc0\x00\x00\x00\x00\x0e\x00'\
b'\x00\xc0\x00\xc0\x03\xc0\x03\xc0\x0c\xc0\x0c\xc0\x30\xc0\x30\xc0'\
b'\x3f\xf0\x3f\xf0\x00\xc0\x00\xc0\x00\xc0\x00\xc0\x00\x00\x00\x00'\
b'\x0e\x00\x3f\xf0\x3f\xf0\x30\x00\x30\x00\x3f\xc0\x3f\xc0\x00\x30'\
b'\x00\x30\x00\x30\x00\x30\x30\x30\x30\x30\x0f\xc0\x0f\xc0\x00\x00'\
b'\x00\x00\x0e\x00\x0f\xc0\x0f\xc0\x30\x30\x30\x30\x30\x00\x30\x00'\
b'\x3f\xc0\x3f\xc0\x30\x30\x30\x30\x30\x30\x30\x30\x0f\xc0\x0f\xc0'\
b'\x00\x00\x00\x00\x0e\x00\x3f\xf0\x3f\xf0\x30\x30\x30\x30\x00\x30'\
b'\x00\x30\x00\xc0\x00\xc0\x03\x00\x03\x00\x0c\x00\x0c\x00\x0c\x00'\
b'\x0c\x00\x00\x00\x00\x00\x0e\x00\x0f\xc0\x0f\xc0\x30\x30\x30\x30'\
b'\x30\x30\x30\x30\x0f\xc0\x0f\xc0\x30\x30\x30\x30\x30\x30\x30\x30'\
b'\x0f\xc0\x0f\xc0\x00\x00\x00\x00\x0e\x00\x0f\xc0\x0f\xc0\x30\x30'\
b'\x30\x30\x30\x30\x30\x30\x0f\xf0\x0f\xf0\x00\x30\x00\x30\x00\xc0'\
b'\x00\xc0\x0f\x00\x0f\x00\x00\x00\x00\x00\x0e\x00\x0f\xc0\x0f\xc0'\
b'\x30\x30\x30\x30\x00\x30\x00\x30\x03\xc0\x03\xc0\x0c\x00\x0c\x00'\
b'\x00\x00\x00\x00\x03\x00\x03\x00\x00\x00\x00\x00\x0e\x00\x0f\xc0'\
b'\x0f\xc0\x30\x30\x30\x30\x30\x00\x30\x00\x30\x00\x30\x00\x30\x00'\
b'\x30\x00\x30\x30\x30\x30\x0f\xc0\x0f\xc0\x00\x00\x00\x00\x0a\x00'\
b'\x00\x00\x00\x00\x0c\x00\x0c\x00\x33\x00\x33\x00\x33\x00\x33\x00'\
b'\x0c\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\

_sparse =\
b'\x20\x00\x22\x00\x25\x00\x34\x00\x30\x00\x66\x00\x31\x00\x88\x00'\
b'\x32\x00\xaa\x00\x33\x00\xcc\x00\x34\x00\xee\x00\x35\x00\x10\x01'\
b'\x36\x00\x32\x01\x37\x00\x54\x01\x38\x00\x76\x01\x39\x00\x98\x01'\
b'\x3f\x00\xba\x01\x43\x00\xdc\x01\xb0\x00\xfe\x01'

_mvfont = memoryview(_font)
_mvsp = memoryview(_sparse)
ifb = lambda l : l[0] | (l[1] << 8)

def bs(lst, val):
    while True:
        m = (len(lst) & ~ 7) >> 1
        v = ifb(lst[m:])
        if v == val:
            return ifb(lst[m + 2:])
        if not m:
            return 0
        lst = lst[m:] if v < val else lst[:m]

def get_ch(ch):
    doff = bs(_mvsp, ord(ch))
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 16
    return _mvfont[doff + 2:next_offs], 16, width
 
